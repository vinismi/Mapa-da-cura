'use server';

/**
 * @fileOverview This file defines a Genkit flow for generating personalized responses based on user input.
 *
 * - generatePersonalizedResponse - A function that takes user input and returns a personalized response.
 * - PersonalizedResponseInput - The input type for the generatePersonalizedResponse function.
 * - PersonalizedResponseOutput - The return type for the generatePersonalizedResponse function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const PersonalizedResponseInputSchema = z.object({
  userInput: z.string().describe('The user input to personalize the response to.'),
});
export type PersonalizedResponseInput = z.infer<
  typeof PersonalizedResponseInputSchema
>;

const PersonalizedResponseOutputSchema = z.object({
  personalizedResponse: z
    .string()
    .describe('The personalized response generated by the AI.'),
});
export type PersonalizedResponseOutput = z.infer<
  typeof PersonalizedResponseOutputSchema
>;

export async function generatePersonalizedResponse(
  input: PersonalizedResponseInput
): Promise<PersonalizedResponseOutput> {
  return personalizedResponseFlow(input);
}

const personalizedResponsePrompt = ai.definePrompt({
  name: 'personalizedResponsePrompt',
  input: {schema: PersonalizedResponseInputSchema},
  output: {schema: PersonalizedResponseOutputSchema},
  prompt: `You are a helpful chatbot designed to provide personalized responses based on user input.

  User Input: {{{userInput}}}

  Generate a response that is tailored to the user's specific needs and pain points, ensuring the conversation feels relevant and engaging.`,
});

const personalizedResponseFlow = ai.defineFlow(
  {
    name: 'personalizedResponseFlow',
    inputSchema: PersonalizedResponseInputSchema,
    outputSchema: PersonalizedResponseOutputSchema,
  },
  async input => {
    const {output} = await personalizedResponsePrompt(input);
    return output!;
  }
);
// New flow to check if user is correcting their name
const NameCorrectionCheckInputSchema = z.object({
  previousName: z.string(),
  currentInput: z.string(),
});
export type NameCorrectionCheckInput = z.infer<typeof NameCorrectionCheckInputSchema>;

const NameCorrectionCheckOutputSchema = z.object({
  isCorrectingName: z.boolean().describe("True if the user seems to be correcting their name, false otherwise."),
  newName: z.string().nullable().describe("The corrected name if isCorrectingName is true, otherwise null."),
});
export type NameCorrectionCheckOutput = z.infer<typeof NameCorrectionCheckOutputSchema>;

export async function checkForNameCorrection(input: NameCorrectionCheckInput): Promise<NameCorrectionCheckOutput> {
    return nameCorrectionCheckFlow(input);
}

const nameCorrectionPrompt = ai.definePrompt({
    name: 'nameCorrectionPrompt',
    input: { schema: NameCorrectionCheckInputSchema },
    output: { schema: NameCorrectionCheckOutputSchema },
    prompt: `A user previously said their name was "{{previousName}}". Their current input is "{{currentInput}}".
    Analyze the user's input to determine if they are trying to correct their name.
    Common patterns for name correction include phrases like "meu nome é...", "na verdade é...", "quis dizer...", or simply stating a new name that is different from the previous one.
    If it seems like a correction, set isCorrectingName to true and extract the new name. Otherwise, set isCorrectingName to false.`,
});

const nameCorrectionCheckFlow = ai.defineFlow(
    {
        name: 'nameCorrectionCheckFlow',
        inputSchema: NameCorrectionCheckInputSchema,
        outputSchema: NameCorrectionCheckOutputSchema,
    },
    async (input) => {
        const { output } = await nameCorrectionPrompt(input);
        return output!;
    }
);